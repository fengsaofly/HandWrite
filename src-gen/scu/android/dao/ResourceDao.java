package scu.android.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import scu.android.dao.Resource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RESOURCE.
*/
public class ResourceDao extends AbstractDao<Resource, Long> {

    public static final String TABLENAME = "RESOURCE";

    /**
     * Properties of entity Resource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Resource_id = new Property(1, Long.class, "resource_id", false, "RESOURCE_ID");
        public final static Property Resource_spath = new Property(2, String.class, "resource_spath", false, "RESOURCE_SPATH");
        public final static Property Resource_lpath = new Property(3, String.class, "resource_lpath", false, "RESOURCE_LPATH");
    };

    private Query<Resource> question_ResourceListQuery;
    private Query<Resource> reply_ResourceListQuery;

    public ResourceDao(DaoConfig config) {
        super(config);
    }
    
    public ResourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RESOURCE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RESOURCE_ID' INTEGER," + // 1: resource_id
                "'RESOURCE_SPATH' TEXT," + // 2: resource_spath
                "'RESOURCE_LPATH' TEXT);"); // 3: resource_lpath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RESOURCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Resource entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long resource_id = entity.getResource_id();
        if (resource_id != null) {
            stmt.bindLong(2, resource_id);
        }
 
        String resource_spath = entity.getResource_spath();
        if (resource_spath != null) {
            stmt.bindString(3, resource_spath);
        }
 
        String resource_lpath = entity.getResource_lpath();
        if (resource_lpath != null) {
            stmt.bindString(4, resource_lpath);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Resource readEntity(Cursor cursor, int offset) {
        Resource entity = new Resource( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // resource_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resource_spath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // resource_lpath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Resource entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResource_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setResource_spath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResource_lpath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Resource entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Resource entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "resourceList" to-many relationship of Question. */
    public List<Resource> _queryQuestion_ResourceList(Long resource_id) {
        synchronized (this) {
            if (question_ResourceListQuery == null) {
                QueryBuilder<Resource> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Resource_id.eq(null));
                question_ResourceListQuery = queryBuilder.build();
            }
        }
        Query<Resource> query = question_ResourceListQuery.forCurrentThread();
        query.setParameter(0, resource_id);
        return query.list();
    }

    /** Internal query to resolve the "resourceList" to-many relationship of Reply. */
    public List<Resource> _queryReply_ResourceList(Long resource_id) {
        synchronized (this) {
            if (reply_ResourceListQuery == null) {
                QueryBuilder<Resource> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Resource_id.eq(null));
                reply_ResourceListQuery = queryBuilder.build();
            }
        }
        Query<Resource> query = reply_ResourceListQuery.forCurrentThread();
        query.setParameter(0, resource_id);
        return query.list();
    }

}
