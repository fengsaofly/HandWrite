package scu.android.dao;

import java.util.List;
import scu.android.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table REPLY.
 */
public class Reply implements java.io.Serializable {

    private Long id;
    private Long qr_id;
    private String qr_text;
    private Long created_time;
    private Short qr_type;
    private Long qr_user;
    private Long qr_q;
    private Long qr_resource;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReplyDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Question question;
    private Long question__resolvedKey;

    private List<Resource> resourceList;
    private List<Reply> replyList;

    public Reply() {
    }

    public Reply(Long id) {
        this.id = id;
    }

    public Reply(Long id, Long qr_id, String qr_text, Long created_time, Short qr_type, Long qr_user, Long qr_q, Long qr_resource) {
        this.id = id;
        this.qr_id = qr_id;
        this.qr_text = qr_text;
        this.created_time = created_time;
        this.qr_type = qr_type;
        this.qr_user = qr_user;
        this.qr_q = qr_q;
        this.qr_resource = qr_resource;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReplyDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getQr_id() {
        return qr_id;
    }

    public void setQr_id(Long qr_id) {
        this.qr_id = qr_id;
    }

    public String getQr_text() {
        return qr_text;
    }

    public void setQr_text(String qr_text) {
        this.qr_text = qr_text;
    }

    public Long getCreated_time() {
        return created_time;
    }

    public void setCreated_time(Long created_time) {
        this.created_time = created_time;
    }

    public Short getQr_type() {
        return qr_type;
    }

    public void setQr_type(Short qr_type) {
        this.qr_type = qr_type;
    }

    public Long getQr_user() {
        return qr_user;
    }

    public void setQr_user(Long qr_user) {
        this.qr_user = qr_user;
    }

    public Long getQr_q() {
        return qr_q;
    }

    public void setQr_q(Long qr_q) {
        this.qr_q = qr_q;
    }

    public Long getQr_resource() {
        return qr_resource;
    }

    public void setQr_resource(Long qr_resource) {
        this.qr_resource = qr_resource;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.qr_user;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            qr_user = user == null ? null : user.getId();
            user__resolvedKey = qr_user;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        Long __key = this.qr_q;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    public void setQuestion(Question question) {
        synchronized (this) {
            this.question = question;
            qr_q = question == null ? null : question.getId();
            question__resolvedKey = qr_q;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Resource> getResourceList() {
        if (resourceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ResourceDao targetDao = daoSession.getResourceDao();
            List<Resource> resourceListNew = targetDao._queryReply_ResourceList(qr_resource);
            synchronized (this) {
                if(resourceList == null) {
                    resourceList = resourceListNew;
                }
            }
        }
        return resourceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetResourceList() {
        resourceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Reply> getReplyList() {
        if (replyList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReplyDao targetDao = daoSession.getReplyDao();
            List<Reply> replyListNew = targetDao._queryReply_ReplyList(qr_id);
            synchronized (this) {
                if(replyList == null) {
                    replyList = replyListNew;
                }
            }
        }
        return replyList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReplyList() {
        replyList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
