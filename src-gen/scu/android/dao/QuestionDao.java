package scu.android.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import scu.android.dao.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTION.
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Q_id = new Property(1, Long.class, "q_id", false, "Q_ID");
        public final static Property Q_title = new Property(2, String.class, "q_title", false, "Q_TITLE");
        public final static Property Q_text_content = new Property(3, String.class, "q_text_content", false, "Q_TEXT_CONTENT");
        public final static Property Created_time = new Property(4, Long.class, "created_time", false, "CREATED_TIME");
        public final static Property Q_grade = new Property(5, String.class, "q_grade", false, "Q_GRADE");
        public final static Property Q_subject = new Property(6, String.class, "q_subject", false, "Q_SUBJECT");
        public final static Property Q_state = new Property(7, Short.class, "q_state", false, "Q_STATE");
        public final static Property Q_user = new Property(8, Long.class, "q_user", false, "Q_USER");
        public final static Property Q_resource = new Property(9, Long.class, "q_resource", false, "Q_RESOURCE");
    };

    private DaoSession daoSession;

    private Query<Question> user_QuestionListQuery;

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'Q_ID' INTEGER," + // 1: q_id
                "'Q_TITLE' TEXT," + // 2: q_title
                "'Q_TEXT_CONTENT' TEXT," + // 3: q_text_content
                "'CREATED_TIME' INTEGER," + // 4: created_time
                "'Q_GRADE' TEXT," + // 5: q_grade
                "'Q_SUBJECT' TEXT," + // 6: q_subject
                "'Q_STATE' INTEGER," + // 7: q_state
                "'Q_USER' INTEGER," + // 8: q_user
                "'Q_RESOURCE' INTEGER);"); // 9: q_resource
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long q_id = entity.getQ_id();
        if (q_id != null) {
            stmt.bindLong(2, q_id);
        }
 
        String q_title = entity.getQ_title();
        if (q_title != null) {
            stmt.bindString(3, q_title);
        }
 
        String q_text_content = entity.getQ_text_content();
        if (q_text_content != null) {
            stmt.bindString(4, q_text_content);
        }
 
        Long created_time = entity.getCreated_time();
        if (created_time != null) {
            stmt.bindLong(5, created_time);
        }
 
        String q_grade = entity.getQ_grade();
        if (q_grade != null) {
            stmt.bindString(6, q_grade);
        }
 
        String q_subject = entity.getQ_subject();
        if (q_subject != null) {
            stmt.bindString(7, q_subject);
        }
 
        Short q_state = entity.getQ_state();
        if (q_state != null) {
            stmt.bindLong(8, q_state);
        }
 
        Long q_user = entity.getQ_user();
        if (q_user != null) {
            stmt.bindLong(9, q_user);
        }
 
        Long q_resource = entity.getQ_resource();
        if (q_resource != null) {
            stmt.bindLong(10, q_resource);
        }
    }

    @Override
    protected void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // q_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // q_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // q_text_content
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // created_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // q_grade
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // q_subject
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // q_state
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // q_user
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // q_resource
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQ_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQ_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQ_text_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated_time(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setQ_grade(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQ_subject(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQ_state(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setQ_user(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setQ_resource(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questionList" to-many relationship of User. */
    public List<Question> _queryUser_QuestionList(Long q_user) {
        synchronized (this) {
            if (user_QuestionListQuery == null) {
                QueryBuilder<Question> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Q_user.eq(null));
                user_QuestionListQuery = queryBuilder.build();
            }
        }
        Query<Question> query = user_QuestionListQuery.forCurrentThread();
        query.setParameter(0, q_user);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM QUESTION T");
            builder.append(" LEFT JOIN USER T0 ON T.'Q_USER'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Question loadCurrentDeep(Cursor cursor, boolean lock) {
        Question entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Question loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Question> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Question> list = new ArrayList<Question>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Question> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Question> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
