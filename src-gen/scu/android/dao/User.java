package scu.android.dao;

import java.util.List;
import scu.android.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class User implements java.io.Serializable {

    private Long id;
    private Long user_id;
    private String user_name;
    private Long created_time;
    private String grade;
    private String user_avatar;
    private String user_nickname;
    private Short user_sex;
    private String user_pwd;
    private String cur_lon;
    private String cur_lat;
    private Short cur_age;
    private String user_email;
    private Short user_type;
    private String user_school;
    private String user_phone;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Question> questionList;
    private List<Reply> replyList;
    private List<Story> storyList;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Long user_id, String user_name, Long created_time, String grade, String user_avatar, String user_nickname, Short user_sex, String user_pwd, String cur_lon, String cur_lat, Short cur_age, String user_email, Short user_type, String user_school, String user_phone) {
        this.id = id;
        this.user_id = user_id;
        this.user_name = user_name;
        this.created_time = created_time;
        this.grade = grade;
        this.user_avatar = user_avatar;
        this.user_nickname = user_nickname;
        this.user_sex = user_sex;
        this.user_pwd = user_pwd;
        this.cur_lon = cur_lon;
        this.cur_lat = cur_lat;
        this.cur_age = cur_age;
        this.user_email = user_email;
        this.user_type = user_type;
        this.user_school = user_school;
        this.user_phone = user_phone;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public String getUser_name() {
        return user_name;
    }

    public void setUser_name(String user_name) {
        this.user_name = user_name;
    }

    public Long getCreated_time() {
        return created_time;
    }

    public void setCreated_time(Long created_time) {
        this.created_time = created_time;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public String getUser_avatar() {
        return user_avatar;
    }

    public void setUser_avatar(String user_avatar) {
        this.user_avatar = user_avatar;
    }

    public String getUser_nickname() {
        return user_nickname;
    }

    public void setUser_nickname(String user_nickname) {
        this.user_nickname = user_nickname;
    }

    public Short getUser_sex() {
        return user_sex;
    }

    public void setUser_sex(Short user_sex) {
        this.user_sex = user_sex;
    }

    public String getUser_pwd() {
        return user_pwd;
    }

    public void setUser_pwd(String user_pwd) {
        this.user_pwd = user_pwd;
    }

    public String getCur_lon() {
        return cur_lon;
    }

    public void setCur_lon(String cur_lon) {
        this.cur_lon = cur_lon;
    }

    public String getCur_lat() {
        return cur_lat;
    }

    public void setCur_lat(String cur_lat) {
        this.cur_lat = cur_lat;
    }

    public Short getCur_age() {
        return cur_age;
    }

    public void setCur_age(Short cur_age) {
        this.cur_age = cur_age;
    }

    public String getUser_email() {
        return user_email;
    }

    public void setUser_email(String user_email) {
        this.user_email = user_email;
    }

    public Short getUser_type() {
        return user_type;
    }

    public void setUser_type(Short user_type) {
        this.user_type = user_type;
    }

    public String getUser_school() {
        return user_school;
    }

    public void setUser_school(String user_school) {
        this.user_school = user_school;
    }

    public String getUser_phone() {
        return user_phone;
    }

    public void setUser_phone(String user_phone) {
        this.user_phone = user_phone;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Question> getQuestionList() {
        if (questionList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            List<Question> questionListNew = targetDao._queryUser_QuestionList(user_id);
            synchronized (this) {
                if(questionList == null) {
                    questionList = questionListNew;
                }
            }
        }
        return questionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetQuestionList() {
        questionList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Reply> getReplyList() {
        if (replyList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReplyDao targetDao = daoSession.getReplyDao();
            List<Reply> replyListNew = targetDao._queryUser_ReplyList(user_id);
            synchronized (this) {
                if(replyList == null) {
                    replyList = replyListNew;
                }
            }
        }
        return replyList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetReplyList() {
        replyList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Story> getStoryList() {
        if (storyList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoryDao targetDao = daoSession.getStoryDao();
            List<Story> storyListNew = targetDao._queryUser_StoryList(user_id);
            synchronized (this) {
                if(storyList == null) {
                    storyList = storyListNew;
                }
            }
        }
        return storyList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStoryList() {
        storyList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
